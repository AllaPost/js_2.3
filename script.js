// Задание 1: Определения операторов и операндов

let x = 5 + 10 * 2; // оператор: =, +, *, операнды: x, 5, 10, 2
let isValid = x > 10 && x < 30; // оператор: =, >, &&, <, операнды: isValid, x, 10, 30
x++; // оператор: ++, операнд: x
delete obj.prop; // оператор: delete, операнд: obj.prop

// Задание 2: Арифметические операторы в файле script2.js

// Задание 3: Бинарные и унарные операторы

let a = 10; // Оператор = бинарный, т.к. присваивает значение переменной а. Он работает с двумя операндами а и 10.
let b = -a; // Оператор = бинарный, присваивает значение переменной b. Оператор - перед а унарный, он меняет знак переменной а (унарные операторы работают только с одним операндом).
a++; // Оператор ++ унарный, увеличивает значение переменной а на 1. Он действует на одну переменную.
let c = a + b; // Оператор = бинарный, присваивает значение переменной c. Оператор + бинарный, складывает значения a и b. Бинарные операторы работают с двумя операндами. 

// Задание 4: Операторы проверки отношений в файле script2.js

// Задание 5: Проверка на равенство и неравенство

5 == '5';  // Результат: `true`. Оператор == выполняет нестрогое сравнение, при котором происходит приведение типов. В данном случае строка '5' приводится к числу перед сравнением с числом 5. После приведения типов оба значения равны, поэтому результат — true.
5 === '5'; // Результат: `false`. Оператор === выполняет строгое сравнение, при котором сравниваются не только значения, но и типы данных. В данном случае число 5 и строка '5' имеют разные типы (число и строка), поэтому результат — false.
null == undefined; // Результат: `true`. Оператор == при нестрогом сравнении считает значения null и undefined равными, так как оба представляют отсутствие значения. Но при этом они не приводятся к одному типу.
null === undefined; // Результат: `false`. Оператор === сравнивает не только значения, но и типы данных. null и undefined — это разные типы, поэтому результат — `false`.

// Задание 6: Оператор in в файле script2.js

// Задание 7: Оператор присваивания и комбинирование с другими операторами

let v = 10;

v += 5; // Сокращение для v = v + 5;
v *= 2; // Сокращение для v = v * 2;
v -= 3; // Сокращение для v = v - 3;

// Задание 8-11: в файле script2.js

